{"ast":null,"code":"var _jsxFileName = \"D:\\\\InternShip\\\\17-07-2024\\\\main\\\\src\\\\QrCodeScanner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [result, setResult] = useState('No result');\n  const [error, setError] = useState(null);\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n    }\n  };\n  const handleError = err => {\n    setError(err);\n    console.error(err);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QR Code Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 300,\n      onError: handleError,\n      onScan: handleScan,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error ? `Error: ${error}` : `Scanned Result: ${result}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"q7xU2mbwRTRytCG+BASFn0MyPzs=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["React","useState","QrReader","jsxDEV","_jsxDEV","QRScanner","_s","result","setResult","error","setError","handleScan","data","handleError","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","delay","onError","onScan","style","width","_c","$RefreshReg$"],"sources":["D:/InternShip/17-07-2024/main/src/QrCodeScanner.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nconst QRScanner = () => {\r\n  const [result, setResult] = useState('No result');\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleScan = (data) => {\r\n    if (data) {\r\n      setResult(data);\r\n    }\r\n  };\r\n\r\n  const handleError = (err) => {\r\n    setError(err);\r\n    console.error(err);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>QR Code Scanner</h1>\r\n      <QrReader\r\n        delay={300}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n        style={{ width: '100%' }}\r\n      />\r\n      <p>{error ? `Error: ${error}` : `Scanned Result: ${result}`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,WAAW,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMU,UAAU,GAAIC,IAAI,IAAK;IAC3B,IAAIA,IAAI,EAAE;MACRJ,SAAS,CAACI,IAAI,CAAC;IACjB;EACF,CAAC;EAED,MAAMC,WAAW,GAAIC,GAAG,IAAK;IAC3BJ,QAAQ,CAACI,GAAG,CAAC;IACbC,OAAO,CAACN,KAAK,CAACK,GAAG,CAAC;EACpB,CAAC;EAED,oBACEV,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBhB,OAAA,CAACF,QAAQ;MACPmB,KAAK,EAAE,GAAI;MACXC,OAAO,EAAET,WAAY;MACrBU,MAAM,EAAEZ,UAAW;MACnBa,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACFhB,OAAA;MAAAY,QAAA,EAAIP,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,mBAAmBF,MAAM;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV,CAAC;AAACd,EAAA,CA3BID,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AA6Bf,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}